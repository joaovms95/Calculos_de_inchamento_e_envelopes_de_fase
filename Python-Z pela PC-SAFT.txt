#Z pela PC-SAFT a partir de T, eta e composição
import numpy as np

'''#Dados de entrada para teste (metano, etano e propano):
comp = np.array([0.1,0.3,0.6])
m = np.array([1,1.6069,2.002])
sigma = ([3.7039,3.5206,3.6184]) #angstron
epsilon_K = ([150.03,191.42,208.11]) #Kelvin
eta = 0.402 #fração de empacotamento (definir eta já define ro, e vice-versa)
k = np.array([[0,3e-4,1.15e-2],[3e-4,0,5.1e-3],[1.15e-2,5.1e-3,0]])
T = 233.15 #Kelvin'''

def PSFT(m,sigma,epsilon_K,k,T,eta,comp):

    #Constantes
    K = 1.380649e-23 #J/K constante de Boltzmann
    N = 6.02214076e23 #mol^-1 constante de Avogadro
    R = 8.3144621 #J/(mol*K)

    #Constantes da teoria da perturbação:
    a0 = np.array([0.9105631445,0.6361281449,2.6861347891,-26.547362491,97.759208784,-159.59154087,91.297774084])
    a1 = np.array([-0.3084016918,0.1860531159,-2.5030047259,21.419793629,-65.255885330,83.318680481,-33.746922930])
    a2 = np.array([-0.0906148351,0.4527842806,0.5962700728,-1.7241829131,-4.1302112531,13.776631870,-8.6728470368])
    b0 = np.array([0.7240946941,2.2382791861,-4.0025849485,-21.003576815,26.855641363,206.55133841,-355.60235612])
    b1 = np.array([-0.5755498075,0.6995095521,3.8925673390,-17.215471648,192.67226447,-161.82646165,-165.20769346])
    b2 = np.array([0.0976883116,-0.2557574982,-9.1558561530,20.642075974,-38.804430052,93.626774077,-29.66690558])

    mbarra = sum(comp*m)

    a_mbarra = np.zeros(7)
    b_mbarra = np.zeros(7)
    for i in range(0,7):
        a_mbarra[i] = a0[i] + (mbarra-1)/mbarra*a1[i] + (mbarra-1)/mbarra*(mbarra-2)/mbarra*a2[i]
        b_mbarra[i] = b0[i] + (mbarra-1)/mbarra*b1[i] + (mbarra-1)/mbarra*(mbarra-2)/mbarra*b2[i]

    I1 = 0
    I2 = 0
    for i in range(0,7):
        I1 += a_mbarra[i]*eta**i
        I2 += b_mbarra[i]*eta**i

    sigmaij = np.zeros((len(comp),len(comp)))
    epsilonij = np.zeros((len(comp),len(comp)))
    for i in range(0,len(comp)):
        for j in range(0,len(comp)):
            sigmaij[i,j] = 0.5*(sigma[i]+sigma[j])
            epsilonij[i,j] = np.sqrt(epsilon_K[i]*epsilon_K[j])*(1-k[i,j])

    m2es3 = 0
    m2e2s3 = 0
    for i in range(0,len(comp)):
        for j in range(0,len(comp)):
            m2es3 += comp[i]*comp[j]*m[i]*m[j]*epsilonij[i,j]/T*sigmaij[i,j]**3
            m2e2s3 += comp[i]*comp[j]*m[i]*m[j]*(epsilonij[i,j]/T)**2*sigmaij[i,j]**3

    C1 = (1 + mbarra*(8*eta-2*eta**2)/(1-eta)**4 + (1-mbarra)*(20*eta-27*eta**2+12*eta**3-2*eta**4)/((1-eta)*(2-eta))**2)**-1

    d = np.zeros(len(comp))
    for i in range(0,len(comp)):
        d[i] = sigma[i]*(1-0.12*np.exp(-3*epsilon_K[i]/T))

    soma = 0
    for i in range(0,len(comp)):
        soma += comp[i]*m[i]*d[i]**3
    ro = 6/np.pi*eta*soma**-1

    zeta = np.zeros(4)
    for n in range(0,4):
        soma = 0
        for i in range(0,len(comp)):
            soma += comp[i]*m[i]*d[i]**n
        zeta[n] = np.pi/6*ro*soma

    ghs = np.zeros((len(comp),len(comp)))
    for i in range(0,len(comp)):
        for j in range(0,len(comp)):
            ghs[i,j] = 1/(1-zeta[3]) + d[i]*d[j]/(d[i]+d[j])*3*zeta[2]/(1-zeta[3])**2 + (d[i]*d[j]/(d[i]+d[j]))**2*2*zeta[2]**2/(1-zeta[3])**3

    Zhs = zeta[3]/(1-zeta[3]) + 3*zeta[1]*zeta[2]/(zeta[0]*(1-zeta[3])**2) + (3*zeta[2]**3-zeta[3]*zeta[2]**3)/(zeta[0]*(1-zeta[3])**3)

    rodg_dp = np.zeros((len(comp),len(comp)))
    for i in range(0,len(comp)):
        for j in range(0,len(comp)):
            rodg_dp[i,j] = zeta[3]/(1-zeta[3])**2 + (d[i]*d[j]/(d[i]+d[j]))*(3*zeta[2]/(1-zeta[3])**2+6*zeta[2]*zeta[3]/(1-zeta[3])**3) + (d[i]*d[j]/(d[i]+d[j]))**2*(4*zeta[2]**2/(1-zeta[3])**3+6*zeta[2]**2*zeta[3]/(1-zeta[3])**4)

    soma2 = 0
    for i in range(len(comp)):
        soma2 += comp[i]*(m[i]-1)*ghs[i,i]**-1*rodg_dp[i,i]

    Zhc = mbarra*Zhs-soma2

    detaI1_deta = 0
    detaI2_deta = 0
    for i in range(0,7):
        detaI1_deta += a_mbarra[i]*(i+1)*eta**i
        detaI2_deta += b_mbarra[i]*(i+1)*eta**i

    C2 = -C1**2*(mbarra*(-4*eta**2+20*eta+8)/(1-eta)**5+(1-mbarra)*(2*eta**3+12*eta**2-48*eta+40)/((1-eta)*(2-eta))**3)

    Zdisp = -2*np.pi*ro*detaI1_deta*m2es3-np.pi*ro*mbarra*(C1*detaI2_deta+C2*eta*I2)*m2e2s3

    Z = 1+Zhc+Zdisp
    return Z
